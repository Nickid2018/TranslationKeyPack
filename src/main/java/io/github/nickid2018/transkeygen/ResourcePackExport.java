package io.github.nickid2018.transkeygen;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import org.apache.commons.io.IOUtils;

import java.io.FileOutputStream;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

public class ResourcePackExport implements AutoCloseable {

    private final ZipOutputStream outputStream;

    public ResourcePackExport(String outputLoc) throws IOException {
        outputStream = new ZipOutputStream(new FileOutputStream(outputLoc));
    }

    public void generateMetaInfo(int resourcePackVersion, boolean includeAfter) throws IOException {
        // https://zh.minecraft.wiki/index.php?curid=10215
        JsonObject metaData = new JsonObject();

        // Pack info
        JsonObject pack = new JsonObject();
        pack.addProperty("pack_format", resourcePackVersion);
        if (includeAfter) {
            JsonArray supportedFormats = new JsonArray();
            supportedFormats.add(resourcePackVersion);
            supportedFormats.add(2147483647);
            metaData.add("supported_formats", supportedFormats);
        }
        pack.addProperty("description", "§aDisplay All Translation Keys\n§6Generated by Nickid2018");
        metaData.add("pack", pack);

        // Language info
        JsonObject language = new JsonObject();
        JsonObject qqx = new JsonObject();
        qqx.addProperty("name", "Translation Keys");
        qqx.addProperty("region", "Translation Keys");
        language.add("qqx", qqx);
        metaData.add("language", language);

        // Write to file
        ZipEntry metaInfo = new ZipEntry("pack.mcmeta");
        outputStream.putNextEntry(metaInfo);
        IOUtils.write(metaData.toString(), outputStream, "UTF-8");
        outputStream.closeEntry();
    }

    public void addLanguageFile(String supplier) throws IOException {
        ZipEntry langFile = new ZipEntry("assets/minecraft/lang/qqx.json");
        outputStream.putNextEntry(langFile);
        IOUtils.write(supplier, outputStream, "UTF-8");
        outputStream.closeEntry();
    }

    @Override
    public void close() throws IOException {
        outputStream.close();
    }
}
